{"project": "nested-pandas", "project_url": "https://github.com/lincc-frameworks/nested-pandas", "show_commit_url": "https://github.com/lincc-frameworks/nested-pandas/commit/", "hash_length": 8, "revision_to_hash": {"0": "70b520ee45f14a642519b413399edc584795095d", "1": "d8ea9bda0fcb5d729f3ca55b91df33652a409323", "3": "48c6798c90b202dfd3eb325b2e56ac972ab3219a", "4": "bc320bce49750cd3fcb6278e0a060ed57e62bd77", "6": "b78b3b61ce9619716dc74f50bd2dc9994f12123c", "10": "05cc195f6037872a3ac0d49081d89b7374f5cb41", "16": "a1d41363e2f60a4689d512e9d7965b526946d551", "18": "dfb9139c39c4b5c695a8e296098ccfb2f9bc2ec5", "20": "9ca3810ef2729f910f999bd88dd15003f1bf7021", "21": "e04f558b879a6bfd9ae916691fb15fb5f3df8666", "22": "70afe87150f7221c858c90f4125398e4e502f8fc", "28": "00be4642a5dbe446ab85f018fe64ead72bf190a2", "33": "136f2c50571728c795c6e8a08d0df4036353f4d6", "39": "e43b187addfaa16b89d974bee67b59d61ed4017d", "40": "b822a14532f190820039018fc9165af45bd5ec4f", "50": "d63cee9f605c04ae9d8b3c512f4eb98a9fbbe9dd", "53": "39acb912b9fcb12cbcc77e3726ae059e5cd2a7b8", "55": "e5ca3df612c3945db77d580e19e93a1078c62cec", "56": "1818c57531e60865f09f858a874f7cacfcf018ef", "61": "3aff79e5dddbf3a6207585559f353f3985e9c506", "63": "ac4032f7664c77fcda34e78f998d079ab4885d13", "64": "025ad9620df22f45e86e346c98aa225dd9684dd2", "67": "659b63966afb34338e389ab3f858080f18282ced", "69": "6d09b2346519c1c9144b2e016daaf96fc68ab827", "78": "109c16c82efcb3b33fc770e552d6e0d1e021c61f", "80": "49b03ffbb439392f4771a2ad4c94dd7c26808d79", "86": "f2d488f1ba2883e105c6e7b3fba907f3bc6aef42", "87": "ab5fc4c8176e01e7858630117170317d54ca42e1", "90": "c5ef5a57a8bb50709a0030b8c19e59212d5241af", "92": "d29961271437036edb7cd3f77eff2a8935ee38c7", "93": "3d65f46d43de77df57b4c6f103cec849076926f5", "97": "5a74ad588ce80dc155caef13a91a4e543ce2a059", "103": "93dd4acf7af30fcb535090f3375815440315512d", "104": "be2b7a641a94ec7dcc571cd1ef4d6bd34c2aca67", "107": "a196bd63cfa77bdb74ad2a00d1637de5b714c367", "112": "88c2aee9cde2e88a18bd5556f14fb9c6e8d9767a", "114": "776b4c8ddc8394110fe5f06b1c263094efa7bd1c", "115": "0dadb25f77440f541e39d810f609895aab84a32d", "120": "631787f7aaa3b60b47ac29cee7713cf05236922e", "125": "c7612af2fbcf42c85cdb679e77279980e1834632", "126": "0cfbe5f36240bc657ace224dec08ccda73a4c5e1", "127": "92b422df4bdc62e004953c2a0bb5bfeaf908658d", "129": "725da0cb2664febac6a8e0fd7e352343c7b5d62f", "131": "b3b4d99cf6e894f8124d65dfcb5f5dad4695a30d", "139": "282bc9b557dbeb41e0ff6bcbd31d3202d2510aa7", "141": "3dea29ff3dc0af37546587c5c4b994161162b00d", "142": "33a3e6f76d94800d9f17b0dbfd99a8016c1381e6", "143": "45d990ebc6fa37c6a4a43f7ecf47cb8a165afb6f", "145": "81979076cfb33027caf29c349f40098b29ee9d9e", "149": "41cce93566304e9d391ffae8876f664884141240", "154": "85641399b3ec7b6f63ecead9d694aeab3b8a4612", "155": "0ed37467c21220f325fd732452724da905138f94", "158": "f86131388c482f652fe667177d73726fc25af125", "162": "aadb12f2d3f7c1d169acd99e67bddad1ddb39f2e", "165": "82fe541fd7b56c7b37ede4cff9be84da8820a757", "170": "0bb042aec710e87242c9cf16a1c2a160edc1f6c7", "171": "615258097faba3ced8ae4dbce517d62526c680a1", "173": "d9c2e6e176b554fecc7604facd9beb98693ba64b", "177": "5cf1fa5c34d31764b29666d27ed1916bb3f3c1be", "181": "c44bfe11b12b2d935e3f059570a0d72d6d9c1577", "184": "307c904b8a148e7d5f95911bf69ef7ec974cede6", "187": "3cd3baaa4c87973af20da3aed87c40f05106cfe1", "192": "bcaf1b8542d4605f3e2b6b923be2d7809f3bfd57", "196": "bc85088ee66584c5f956817c6a84d48072028124", "197": "71ae3ba21ecca1c1ebd2aaef3e5aa66d51aa5969", "203": "5a6ab4a2c53dc88210e6cecc7adf665b028580bf", "207": "ac40d0fef26fd9ba7c9efb160968df08dbb6d8d6"}, "revision_to_date": {"0": 1712002112000, "1": 1712002749000, "3": 1712158683000, "4": 1712158691000, "6": 1712160074000, "10": 1712169058000, "16": 1712252119000, "18": 1712253001000, "20": 1712254078000, "21": 1712261028000, "22": 1712264456000, "28": 1712681232000, "33": 1712692068000, "39": 1712773245000, "40": 1712773256000, "50": 1712865526000, "53": 1712947498000, "55": 1712954496000, "56": 1713199935000, "61": 1713379089000, "63": 1713393190000, "64": 1713484795000, "67": 1713908591000, "69": 1714753113000, "78": 1714767489000, "80": 1714822400000, "86": 1715020010000, "87": 1715094688000, "90": 1715103155000, "92": 1715192273000, "93": 1715195708000, "97": 1715196656000, "103": 1715203869000, "104": 1715204725000, "107": 1715260503000, "112": 1715275687000, "114": 1715278926000, "115": 1715280636000, "120": 1715352678000, "125": 1715357414000, "126": 1715357472000, "127": 1715360027000, "129": 1715375077000, "131": 1715378048000, "139": 1715631004000, "141": 1715898194000, "142": 1715983315000, "143": 1716223680000, "145": 1716242621000, "149": 1716937670000, "154": 1717002251000, "155": 1717010651000, "158": 1717020427000, "162": 1717028887000, "165": 1717082884000, "170": 1717192134000, "171": 1717439852000, "173": 1717706069000, "177": 1718047221000, "181": 1718125788000, "184": 1718651718000, "187": 1720556946000, "192": 1721231912000, "196": 1722030850000, "197": 1722030931000, "203": 1723155498000, "207": 1723230708000}, "params": {"machine": ["gh-runner"], "python": ["3.10"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.10", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"benchmarks.AssignSingleDfToNestedSeries.peakmem_run": {"code": "class AssignSingleDfToNestedSeries:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        self.new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we\n            # need to order by field name here for backwards compatibility.\n            dtype=NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()}),\n        )", "name": "benchmarks.AssignSingleDfToNestedSeries.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "6106a8befbead9252b00aef6a759a13bb8654dc82f15c86b5bb6da7262f4571c"}, "benchmarks.AssignSingleDfToNestedSeries.time_run": {"code": "class AssignSingleDfToNestedSeries:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        self.new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we\n            # need to order by field name here for backwards compatibility.\n            dtype=NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()}),\n        )", "min_run_count": 2, "name": "benchmarks.AssignSingleDfToNestedSeries.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "561679277ad2275813ce0c17ad97dbe31f41b12cdb6533009f12ae1f7b057caf", "warmup_time": -1}, "benchmarks.NestedFrameAddNested.peakmem_run": {"code": "class NestedFrameAddNested:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of adding a nested layer\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        # use provided seed, \"None\" acts as if no seed is provided\n        randomstate = np.random.RandomState(seed=1)\n    \n        # Generate base data\n        base_data = {\"a\": randomstate.random(self.n_base), \"b\": randomstate.random(self.n_base) * 2}\n        self.base_nf = NestedFrame(data=base_data)\n    \n        layer_data = {\n            \"t\": randomstate.random(self.layer_size * self.n_base) * 20,\n            \"flux\": randomstate.random(self.layer_size * self.n_base) * 100,\n            \"band\": randomstate.choice([\"r\", \"g\"], size=self.layer_size * self.n_base),\n            \"index\": np.arange(self.layer_size * self.n_base) % self.n_base,\n        }\n        self.layer_nf = NestedFrame(data=layer_data).set_index(\"index\")", "name": "benchmarks.NestedFrameAddNested.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "7222660c05e164eeabe42a9ea1f18045af2e407dd1e1bb788010eaad7294ba85"}, "benchmarks.NestedFrameAddNested.time_run": {"code": "class NestedFrameAddNested:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of adding a nested layer\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        # use provided seed, \"None\" acts as if no seed is provided\n        randomstate = np.random.RandomState(seed=1)\n    \n        # Generate base data\n        base_data = {\"a\": randomstate.random(self.n_base), \"b\": randomstate.random(self.n_base) * 2}\n        self.base_nf = NestedFrame(data=base_data)\n    \n        layer_data = {\n            \"t\": randomstate.random(self.layer_size * self.n_base) * 20,\n            \"flux\": randomstate.random(self.layer_size * self.n_base) * 100,\n            \"band\": randomstate.choice([\"r\", \"g\"], size=self.layer_size * self.n_base),\n            \"index\": np.arange(self.layer_size * self.n_base) % self.n_base,\n        }\n        self.layer_nf = NestedFrame(data=layer_data).set_index(\"index\")", "min_run_count": 2, "name": "benchmarks.NestedFrameAddNested.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "51982ce9982d11255339dc387081a0db496f1856294c479e72d65e2a4f5fb506", "warmup_time": -1}, "benchmarks.NestedFrameQuery.peakmem_run": {"code": "class NestedFrameQuery:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of applying the two queries\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "name": "benchmarks.NestedFrameQuery.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "cdc2254d41009fb5e493b99ed753b9d677a385388103705b16f1b486c03217c2"}, "benchmarks.NestedFrameQuery.time_run": {"code": "class NestedFrameQuery:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of applying the two queries\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "min_run_count": 2, "name": "benchmarks.NestedFrameQuery.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e9944ed6698261a36de55f71c8228b4fcaa8a50b56657fd8132fc6488238f484", "warmup_time": -1}, "benchmarks.NestedFrameReduce.peakmem_run": {"code": "class NestedFrameReduce:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of applying the reduce function\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "name": "benchmarks.NestedFrameReduce.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "0dc3aac5f09ea8525a745669cff6fca764fabb7cbe35db18f7d46f7377bfea12"}, "benchmarks.NestedFrameReduce.time_run": {"code": "class NestedFrameReduce:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of applying the reduce function\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "min_run_count": 2, "name": "benchmarks.NestedFrameReduce.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5259b45d6e432e2b3eb25050a9581ac63703fbbae1e1fd98cc2fe7b83a9e8b95", "warmup_time": -1}, "benchmarks.ReassignHalfOfNestedSeries.peakmem_run": {"code": "class ReassignHalfOfNestedSeries:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we need to\n        # order by field name here for backwards compatibility.\n        dtype = NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()})\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            dtype=dtype,\n        )\n    \n        new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        self.new_series = pd.Series([new_df] * (self.n_objects // 2), dtype=dtype)", "name": "benchmarks.ReassignHalfOfNestedSeries.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "567fe640051453cd164d11ee74a8aff8c06e2b89a239133ddcc020d9fe426a55"}, "benchmarks.ReassignHalfOfNestedSeries.time_run": {"code": "class ReassignHalfOfNestedSeries:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we need to\n        # order by field name here for backwards compatibility.\n        dtype = NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()})\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            dtype=dtype,\n        )\n    \n        new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        self.new_series = pd.Series([new_df] * (self.n_objects // 2), dtype=dtype)", "min_run_count": 2, "name": "benchmarks.ReassignHalfOfNestedSeries.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9d18ab926df92e4580e7dcbb3760d4206342c672b1e879d7e5a0a3542904b9e4", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {"v0.1": 142, "v0.1.1": 165, "v0.1.2": 187, "v0.1.3": 197}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}