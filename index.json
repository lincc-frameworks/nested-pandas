{"project": "nested-pandas", "project_url": "https://github.com/lincc-frameworks/nested-pandas", "show_commit_url": "https://github.com/lincc-frameworks/nested-pandas/commit/", "hash_length": 8, "revision_to_hash": {"0": "70b520ee45f14a642519b413399edc584795095d", "1": "d8ea9bda0fcb5d729f3ca55b91df33652a409323", "3": "48c6798c90b202dfd3eb325b2e56ac972ab3219a", "4": "bc320bce49750cd3fcb6278e0a060ed57e62bd77", "6": "b78b3b61ce9619716dc74f50bd2dc9994f12123c", "10": "05cc195f6037872a3ac0d49081d89b7374f5cb41", "16": "a1d41363e2f60a4689d512e9d7965b526946d551", "18": "dfb9139c39c4b5c695a8e296098ccfb2f9bc2ec5", "20": "9ca3810ef2729f910f999bd88dd15003f1bf7021", "21": "e04f558b879a6bfd9ae916691fb15fb5f3df8666", "22": "70afe87150f7221c858c90f4125398e4e502f8fc", "28": "00be4642a5dbe446ab85f018fe64ead72bf190a2", "33": "136f2c50571728c795c6e8a08d0df4036353f4d6", "39": "e43b187addfaa16b89d974bee67b59d61ed4017d", "40": "b822a14532f190820039018fc9165af45bd5ec4f", "50": "d63cee9f605c04ae9d8b3c512f4eb98a9fbbe9dd", "53": "39acb912b9fcb12cbcc77e3726ae059e5cd2a7b8", "55": "e5ca3df612c3945db77d580e19e93a1078c62cec", "56": "1818c57531e60865f09f858a874f7cacfcf018ef", "61": "3aff79e5dddbf3a6207585559f353f3985e9c506", "63": "ac4032f7664c77fcda34e78f998d079ab4885d13", "64": "025ad9620df22f45e86e346c98aa225dd9684dd2", "67": "659b63966afb34338e389ab3f858080f18282ced", "69": "6d09b2346519c1c9144b2e016daaf96fc68ab827", "78": "109c16c82efcb3b33fc770e552d6e0d1e021c61f", "80": "49b03ffbb439392f4771a2ad4c94dd7c26808d79", "86": "f2d488f1ba2883e105c6e7b3fba907f3bc6aef42", "87": "ab5fc4c8176e01e7858630117170317d54ca42e1", "90": "c5ef5a57a8bb50709a0030b8c19e59212d5241af", "92": "d29961271437036edb7cd3f77eff2a8935ee38c7", "93": "3d65f46d43de77df57b4c6f103cec849076926f5", "97": "5a74ad588ce80dc155caef13a91a4e543ce2a059", "103": "93dd4acf7af30fcb535090f3375815440315512d", "104": "be2b7a641a94ec7dcc571cd1ef4d6bd34c2aca67", "107": "a196bd63cfa77bdb74ad2a00d1637de5b714c367", "112": "88c2aee9cde2e88a18bd5556f14fb9c6e8d9767a", "114": "776b4c8ddc8394110fe5f06b1c263094efa7bd1c", "115": "0dadb25f77440f541e39d810f609895aab84a32d", "120": "631787f7aaa3b60b47ac29cee7713cf05236922e", "125": "c7612af2fbcf42c85cdb679e77279980e1834632", "126": "0cfbe5f36240bc657ace224dec08ccda73a4c5e1", "127": "92b422df4bdc62e004953c2a0bb5bfeaf908658d", "129": "725da0cb2664febac6a8e0fd7e352343c7b5d62f", "131": "b3b4d99cf6e894f8124d65dfcb5f5dad4695a30d", "139": "282bc9b557dbeb41e0ff6bcbd31d3202d2510aa7", "141": "3dea29ff3dc0af37546587c5c4b994161162b00d", "142": "33a3e6f76d94800d9f17b0dbfd99a8016c1381e6", "143": "45d990ebc6fa37c6a4a43f7ecf47cb8a165afb6f", "145": "81979076cfb33027caf29c349f40098b29ee9d9e", "149": "41cce93566304e9d391ffae8876f664884141240", "154": "85641399b3ec7b6f63ecead9d694aeab3b8a4612", "155": "0ed37467c21220f325fd732452724da905138f94", "158": "f86131388c482f652fe667177d73726fc25af125", "162": "aadb12f2d3f7c1d169acd99e67bddad1ddb39f2e", "165": "82fe541fd7b56c7b37ede4cff9be84da8820a757", "170": "0bb042aec710e87242c9cf16a1c2a160edc1f6c7", "171": "615258097faba3ced8ae4dbce517d62526c680a1", "173": "d9c2e6e176b554fecc7604facd9beb98693ba64b", "177": "5cf1fa5c34d31764b29666d27ed1916bb3f3c1be", "181": "c44bfe11b12b2d935e3f059570a0d72d6d9c1577", "184": "307c904b8a148e7d5f95911bf69ef7ec974cede6", "188": "3cd3baaa4c87973af20da3aed87c40f05106cfe1", "193": "bcaf1b8542d4605f3e2b6b923be2d7809f3bfd57", "197": "bc85088ee66584c5f956817c6a84d48072028124", "198": "71ae3ba21ecca1c1ebd2aaef3e5aa66d51aa5969", "204": "5a6ab4a2c53dc88210e6cecc7adf665b028580bf", "207": "ac40d0fef26fd9ba7c9efb160968df08dbb6d8d6", "208": "a2272cd46fc7ea60ab42796f87f8c229fd708278", "212": "975fbc88de84b6d8d9ae309f71ae3f0b96831818", "218": "6e2f433d2b9aeefedb57ffed24ffd71d1b2ff18d", "221": "0d8c2f35f919bff7245439fc78f75a02bebed377", "223": "6101d396bc9f3d281393ff3bd6da819d6a473ded", "225": "aa34af1b0eae1738cbe3c5ac0bfe1d7d29a9740a", "228": "252765a0ab7a4cd220bf626a93645c5207d336a4", "230": "832848ad958a9f3b635e5ed49162dd848227bfda", "233": "12d12934ffab0a22828422c2f65db61f0e6f180a", "235": "9e761724823335ead10a5df22d46e0221dc04f56", "236": "a7300bc783f4c7fc1ba3df1788d41cfed03a5ab3", "237": "84b8b479d82dd9bda42b0ce6ad54219ac8b7f09c", "238": "3b22b963044f6a12de54c9418b0d21af7d0545ab", "239": "942e0abc2fdbe86df4ade442c2f967b32b659c13", "240": "69dce33fde0b37c520100a767541dda33b1545cf", "241": "cfb42ff8aa9654b5b073eee35f4fa8e186118865", "242": "a9039df586cf2223430c188cdfb8b47d0e9a94c3", "243": "584a882607bce1459b29c39a3be7cce60ebcd135", "244": "6866a8f0d3d2b44a881d9c4c148677f5b866edce", "245": "6496cacafe4740f53508bde97cd194808c1e1169", "246": "a96a508d906c5c31de06573583ec8c5fd7a2de9b", "247": "b8707a9571b9179ddee7236793b2f82a9170f214", "249": "d3796650cb7e1c1f31a388adf1c8c8f235014c1e", "250": "f4dc4c7e076722d47b8ac4ef91d72ab5fec3facd", "251": "6450a2adefd57bbc3d8ade1b1e28f02423ba21d7", "252": "3d42de5a1fdb92678c0359ba87117d243caafc85", "253": "75e3a17db8bdb1404b3fa19ab26dadfde7474ae7", "254": "1a2a1d2774a835d1650fb51ab99f3e7d0995990a", "267": "96503cd3601fd025f8bf4022cc478b9bf80363da", "269": "402ab66e60db290b0c869387fcf68dd818b4425f", "270": "a86a532e6caa3b258da762c3b031af0b52296d12", "271": "1c365d0826b8a35f7ecdaa2dc747c2f746d3290f", "272": "b3100d7fb021a0b469cb4cc2e831faaeb1c82fcc", "273": "e77957e802b14cbaba1e6f854d499f57f209955e", "274": "ec7618058006b895fa4923ba9862b7c624b35119", "275": "91ea45b14bb28400e25cc2d39b6b78a452c05a98", "276": "0e4dc26ad8ecb9abc39d611e1ec3c8a98d8728be", "277": "f8fa635152a6a70a2e5c573bfe48b018e2f08be7", "278": "3cb19bd5e63015fbcedab810efd2432361ad49eb", "282": "27dd430a60630623a706b7d2b1124e1e0f4c5ba6", "283": "58ff091582e60f2463e16fe786293d3e46df598a", "285": "ee8f22731c02f12d8e881461d87d2a7f272e5c46", "287": "b60f6eb6a6d20332c583304e7abfc01be0437c8f", "292": "effbad065253d16c6f6371e091739b7a6dc159b4", "294": "f88c321ee0d2bfd1e1945475a9b0f542fa2f4a72", "296": "77a816ddfef6489e599f8f463f0855c1e2f90882", "298": "7a0c3bdbfa46defa18ec340b1dec663e9b5a7393", "303": "bbe1866d5dd8fb29857b75ced022e9e53e337b94", "305": "99ecc3e654352a73fa963c5d3cc43bb7cbc55255", "306": "6798700a23474dcac19e28eaa27d2bfd67901946", "308": "61ed4f16e5f2e90191c3bd67e47641af632ca59d", "310": "d09e044616d9c4c462f5596824a954fc341fc903", "314": "a416b6b76cd6694293d5a6d0b9b39b696c106a7d", "329": "3d3cab40dc83888215dd9f3a2fb3ed737fc5e380", "331": "495b047a5aa5311bcb85e961c20cf5942ff7c4cc", "333": "d12ec6ecc4c71457823670cc52106283e2c761e0", "338": "e5432b81d77487f3c2494da06796d3788e4489d8", "340": "922f337d7dd3cfba8c6aabab51060519483d454f", "341": "6717fac0c10f76dd8eb6cf33b6c8479f9d66a6ae", "344": "44e986d771a36095edb3cf48d27985e43c3df0df", "346": "6b7a45f73c54a9062333877e65eaf246fd276861", "354": "cf7f4cef50cc689d806fe89e87e10cc3b0dc01ee", "363": "fd5455a003b244c5e0ee224f250e58937f9e629a", "364": "b59d701c95bc0a31ec51df2775f8097f1e002b4f", "367": "cebcc3e2ae2c891bed0e6acb14639a067b6df412", "371": "552d35a10d77f53bea57995a86223ee495ceff10", "372": "f30d2da32ae35acc85fdafade7e750644bba4c0d", "411": "0dabaff32b675912dccd85cdc9cddad9ac91ac66", "420": "2f8cf4cf232632b9c8bd8ed69c0091d09b016611", "423": "626718ecc31f864f394de1fce4246cfbb47de93e", "424": "a96120e80f9a7e5c0ee0054916d5bb7bc0250bd5", "427": "f10acc0e4234c659fb7d61b7f486ce2df6fdcefd", "429": "71828ad1f5d7e0e819d89f0fa5fc7f36c84f77dc", "433": "c771a8b712f14c7721b8b375b1fdf4df338d0a68", "435": "6d89bb94a7499e2c27db8df468055c31c12f1b44", "443": "b6412b53d62aa489a1524506f3273869cdfb7da6", "451": "f75d700edf34a539146743bc900d38ed457346ab", "457": "efaa27ded4cb7e3aaa8c1e17c80116848d37adb1", "459": "7791e5db58cf1662123e12d6d04971d0228a4625", "467": "5f43b2d43d28c72b316b168e13546edf41fe313c", "469": "91d78e5f6ca541289e9dcd458bca70fd37d84b74", "471": "d3148105f96a893f99d5329993f43e29fd5b49b6", "473": "9dafe49ad73b25ffd0e3a50fc95cb77f5ffd12e3", "475": "349a91d1aa4985ae66f90173ecfc2838667e6c28", "476": "080c3e9cdb10ab49bb6986593553443802b52062", "479": "e854bb530290a3667f4fee4f0f08565c5c81c314", "481": "bdfbce49d5faaecc1abec26c27a881610d19b31d", "483": "c1362064285877a0a71fcf2f510b0fb300bf0629", "486": "03c3ad4d3263f43fcd3cf447321d1398cffecea2", "490": "0980e1c25dc7f4515a9ca328e9c9adab16b8b15b", "493": "9ab6f1d42a53d2e87d1f79f09867c82156e9f420", "498": "b228751c55fafa5de4667082c964c1f935034735", "499": "78deda7f896727baa7be7990ab159d9236d9f68c", "505": "54944e1d4518fbca9c32ead3eda6091068ee2908", "511": "8f880093d9c75e788fe85e8711de237827427742", "516": "717860384c1b3597729764423647f0eb097e2604", "517": "bd0a38336b28586cb713078471b5772bf954fae2", "519": "1fc9e445563525cd6f1bc73599cb9e81f67281e3", "525": "e18390ee404f52285884d50f67f753c0aa33395f", "527": "94621d79e84041ef98107b13968ea9fa36fbce5a", "528": "c8ac6c817e032a4dd6fff7885da3c64815c5195a", "529": "1eeda4bafab06582e90b1266a36f6923ccf31fdc", "530": "728d7859efb8d2470b8867f390bbea8f74c66983", "532": "c5dc9c7a44a1f5ada861ebc2b6870517119cec34", "536": "9b0e5aff36896a09cd4051b966c8c9f0b14595ed", "539": "3a2f95c8a623fd64da41fe8900449dc9508fa1e4", "548": "31668e3c583c82950c9e5842edad6bf9335979f3", "549": "18676898149f0171cf6185ccee1927fd845cf090", "551": "b9ef56dee054f9398941d2228fdb8e865b5c7aa1", "553": "35d53b4960e028db4053770b4c8f04dbb66bf6bc", "554": "45b1b74b94faac94e9dae959b0b03d211e5ded77", "558": "8decb32f1177526f576b48274bc61aab9e726b3a", "561": "82cb2e8fd698d44585f93fb355da176f3f4a2688", "562": "fe17e19a58e96b87922b690197e4d04d2cce787c", "563": "53c988ef5dee026ebca9af5e44d12dca8fbf9f6e", "564": "f28da1744bf7aa5d4e4e64a06b28fec05398d749", "566": "b17673948940a860ad088c0affd3f59859b4c4e5", "567": "4186d56d9178074440fa9fea57b0f199387b2d93", "568": "6158e2942dd7161f75cb618bcbe55459654be7ef", "572": "1090b6e1969cf635e4b5dcdb873dc2bfa5a59ea9", "573": "46acb8eb38fb58a3c271d23cff3595233afe40c0", "583": "919fe8233f59c19e545bb01ba4cad372a2e0a23c", "600": "34cd4d67cf5588b7487494a361aaf41eb437c830", "601": "cf6d152484846af25821d38273560425ab5de462", "607": "e21f35776e51fe3054300d8112b3bd49708cda5a", "608": "16dc69ef2d11f9342e61a3855a833a6665e85db0", "609": "127f913bf9dad58d16cbf159d9212ec6a4fa89a4", "610": "c149414cdef59ca3058c4ed14b50b7d9aef4201d", "612": "33463f6bc216dc47e6d3d96d53d02d6d4d571982", "613": "21d3d385a82a1ac9534632193bef663f5fc30ee5", "615": "4b382d812095e6e20c5861d86a3d76d9f3bf4c7d", "617": "42eb06ed27c48a7015f971285e052d92c9153555", "621": "82846c32847b0d44b6554ecaccc7bb24633ec332", "626": "0873b32df9241217b78d628a850962498bd9363b", "628": "f592cac68154814c4137150f3ef65173edb2a582", "633": "c29f7ee02158a32828e885a014695685a341dd0c", "634": "cb5b36d24b3401e9781e08f71c78db966997c263", "636": "1cae1945907f34de3a9beaaa20a2be2ec0344897", "639": "1009850980f7944f8429ef175582069ba7f622f7"}, "revision_to_date": {"0": 1712002112000, "1": 1712002749000, "3": 1712158683000, "4": 1712158691000, "6": 1712160074000, "10": 1712169058000, "16": 1712252119000, "18": 1712253001000, "20": 1712254078000, "21": 1712261028000, "22": 1712264456000, "28": 1712681232000, "33": 1712692068000, "39": 1712773245000, "40": 1712773256000, "50": 1712865526000, "53": 1712947498000, "55": 1712954496000, "56": 1713199935000, "61": 1713379089000, "63": 1713393190000, "64": 1713484795000, "67": 1713908591000, "69": 1714753113000, "78": 1714767489000, "80": 1714822400000, "86": 1715020010000, "87": 1715094688000, "90": 1715103155000, "92": 1715192273000, "93": 1715195708000, "97": 1715196656000, "103": 1715203869000, "104": 1715204725000, "107": 1715260503000, "112": 1715275687000, "114": 1715278926000, "115": 1715280636000, "120": 1715352678000, "125": 1715357414000, "126": 1715357472000, "127": 1715360027000, "129": 1715375077000, "131": 1715378048000, "139": 1715631004000, "141": 1715898194000, "142": 1715983315000, "143": 1716223680000, "145": 1716242621000, "149": 1716937670000, "154": 1717002251000, "155": 1717010651000, "158": 1717020427000, "162": 1717028887000, "165": 1717082884000, "170": 1717192134000, "171": 1717439852000, "173": 1717706069000, "177": 1718047221000, "181": 1718125788000, "184": 1718651718000, "188": 1720556946000, "193": 1721231912000, "197": 1722030850000, "198": 1722030931000, "204": 1723155498000, "207": 1723230708000, "208": 1723237398000, "212": 1723568086000, "218": 1724096325000, "221": 1724172655000, "223": 1725649586000, "225": 1727121784000, "228": 1727718916000, "230": 1727789652000, "233": 1728496944000, "235": 1728928992000, "236": 1728488305000, "237": 1728494277000, "238": 1728502908000, "239": 1728504094000, "240": 1728513201000, "241": 1728580271000, "242": 1728598850000, "243": 1728679593000, "244": 1728924949000, "245": 1728950190000, "246": 1729011990000, "247": 1730238218000, "249": 1730383709000, "250": 1729287138000, "251": 1730400602000, "252": 1730400821000, "253": 1730401118000, "254": 1730402552000, "267": 1730918260000, "269": 1730932200000, "270": 1730945109000, "271": 1732227823000, "272": 1732229139000, "273": 1732312425000, "274": 1732316378000, "275": 1732318470000, "276": 1732319976000, "277": 1732661124000, "278": 1732663108000, "282": 1734636054000, "283": 1734639705000, "285": 1735842786000, "287": 1735943395000, "292": 1736355500000, "294": 1737582717000, "296": 1737730196000, "298": 1738000043000, "303": 1738011388000, "305": 1739403969000, "306": 1739405766000, "308": 1740172777000, "310": 1740178021000, "314": 1740260681000, "329": 1740752304000, "331": 1740762473000, "333": 1740762697000, "338": 1741210321000, "340": 1741215674000, "341": 1741216874000, "344": 1741221376000, "346": 1741371477000, "354": 1741822523000, "363": 1744138491000, "364": 1744139542000, "367": 1744149736000, "371": 1744291123000, "372": 1744299240000, "411": 1744836553000, "420": 1744922560000, "423": 1744995673000, "424": 1745343014000, "427": 1745347706000, "429": 1745439370000, "433": 1745859756000, "435": 1745955350000, "443": 1746032500000, "451": 1746464592000, "457": 1746476803000, "459": 1746643701000, "467": 1746730063000, "469": 1746818420000, "471": 1746819378000, "473": 1746822226000, "475": 1746826230000, "476": 1746836744000, "479": 1747183286000, "481": 1747237987000, "483": 1747416887000, "486": 1747686577000, "490": 1747773245000, "493": 1748352945000, "498": 1749139791000, "499": 1749151115000, "505": 1749490244000, "511": 1749767874000, "516": 1749846862000, "517": 1749847015000, "519": 1750082470000, "525": 1750117500000, "527": 1750263469000, "528": 1751414209000, "529": 1751414756000, "530": 1751486728000, "532": 1751562296000, "536": 1752271880000, "539": 1752509676000, "548": 1752868405000, "549": 1753123156000, "551": 1753131348000, "553": 1753203139000, "554": 1753222532000, "558": 1753633000000, "561": 1753642517000, "562": 1753642728000, "563": 1754606532000, "564": 1755026135000, "566": 1755109320000, "567": 1755186537000, "568": 1755213409000, "572": 1755295386000, "573": 1755298791000, "583": 1755625847000, "600": 1756160899000, "601": 1756228907000, "607": 1756241176000, "608": 1756429333000, "609": 1756487700000, "610": 1756487710000, "612": 1756909530000, "613": 1756910455000, "615": 1757007568000, "617": 1757014722000, "621": 1757019438000, "626": 1757965371000, "628": 1758056061000, "633": 1759162927000, "634": 1759166190000, "636": 1759175831000, "639": 1759331788000}, "params": {"machine": ["gh-runner"], "python": ["3.10", "3.11"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.11", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}, {"machine": "gh-runner", "python": "3.10", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"benchmarks.AssignSingleDfToNestedSeries.peakmem_run": {"code": "class AssignSingleDfToNestedSeries:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        self.new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we\n            # need to order by field name here for backwards compatibility.\n            dtype=NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()}),\n        )", "name": "benchmarks.AssignSingleDfToNestedSeries.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "6106a8befbead9252b00aef6a759a13bb8654dc82f15c86b5bb6da7262f4571c"}, "benchmarks.AssignSingleDfToNestedSeries.time_run": {"code": "class AssignSingleDfToNestedSeries:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        self.new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we\n            # need to order by field name here for backwards compatibility.\n            dtype=NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()}),\n        )", "min_run_count": 2, "name": "benchmarks.AssignSingleDfToNestedSeries.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "561679277ad2275813ce0c17ad97dbe31f41b12cdb6533009f12ae1f7b057caf", "warmup_time": -1}, "benchmarks.CountNestedBy.peakmem_run": {"code": "class CountNestedBy:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of count_nested(nf, by=...)\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "name": "benchmarks.CountNestedBy.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "8207b08e838d3e5646768d48d48c944106815fd344695080785984773a77d655"}, "benchmarks.CountNestedBy.time_run": {"code": "class CountNestedBy:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of count_nested(nf, by=...)\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "min_run_count": 2, "name": "benchmarks.CountNestedBy.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0d5c1cf352c469d4d142234ea6e4c464b76caf509b0893ff39d7224f50b9fd43", "warmup_time": -1}, "benchmarks.NestedFrameAddNested.peakmem_run": {"code": "class NestedFrameAddNested:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of adding a nested layer\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        # use provided seed, \"None\" acts as if no seed is provided\n        randomstate = np.random.RandomState(seed=1)\n    \n        # Generate base data\n        base_data = {\"a\": randomstate.random(self.n_base), \"b\": randomstate.random(self.n_base) * 2}\n        self.base_nf = NestedFrame(data=base_data)\n    \n        layer_data = {\n            \"t\": randomstate.random(self.layer_size * self.n_base) * 20,\n            \"flux\": randomstate.random(self.layer_size * self.n_base) * 100,\n            \"band\": randomstate.choice([\"r\", \"g\"], size=self.layer_size * self.n_base),\n            \"index\": np.arange(self.layer_size * self.n_base) % self.n_base,\n        }\n        self.layer_nf = NestedFrame(data=layer_data).set_index(\"index\")", "name": "benchmarks.NestedFrameAddNested.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "7222660c05e164eeabe42a9ea1f18045af2e407dd1e1bb788010eaad7294ba85"}, "benchmarks.NestedFrameAddNested.time_run": {"code": "class NestedFrameAddNested:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of adding a nested layer\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        # use provided seed, \"None\" acts as if no seed is provided\n        randomstate = np.random.RandomState(seed=1)\n    \n        # Generate base data\n        base_data = {\"a\": randomstate.random(self.n_base), \"b\": randomstate.random(self.n_base) * 2}\n        self.base_nf = NestedFrame(data=base_data)\n    \n        layer_data = {\n            \"t\": randomstate.random(self.layer_size * self.n_base) * 20,\n            \"flux\": randomstate.random(self.layer_size * self.n_base) * 100,\n            \"band\": randomstate.choice([\"r\", \"g\"], size=self.layer_size * self.n_base),\n            \"index\": np.arange(self.layer_size * self.n_base) % self.n_base,\n        }\n        self.layer_nf = NestedFrame(data=layer_data).set_index(\"index\")", "min_run_count": 2, "name": "benchmarks.NestedFrameAddNested.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "51982ce9982d11255339dc387081a0db496f1856294c479e72d65e2a4f5fb506", "warmup_time": -1}, "benchmarks.NestedFrameQuery.peakmem_run": {"code": "class NestedFrameQuery:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of applying the two queries\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "name": "benchmarks.NestedFrameQuery.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "cdc2254d41009fb5e493b99ed753b9d677a385388103705b16f1b486c03217c2"}, "benchmarks.NestedFrameQuery.time_run": {"code": "class NestedFrameQuery:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of applying the two queries\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "min_run_count": 2, "name": "benchmarks.NestedFrameQuery.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e9944ed6698261a36de55f71c8228b4fcaa8a50b56657fd8132fc6488238f484", "warmup_time": -1}, "benchmarks.NestedFrameReduce.peakmem_run": {"code": "class NestedFrameReduce:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of applying the reduce function\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "name": "benchmarks.NestedFrameReduce.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "0dc3aac5f09ea8525a745669cff6fca764fabb7cbe35db18f7d46f7377bfea12"}, "benchmarks.NestedFrameReduce.time_run": {"code": "class NestedFrameReduce:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of applying the reduce function\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment\"\"\"\n        self.nf = datasets.generate_data(self.n_base, self.n_nested)", "min_run_count": 2, "name": "benchmarks.NestedFrameReduce.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5259b45d6e432e2b3eb25050a9581ac63703fbbae1e1fd98cc2fe7b83a9e8b95", "warmup_time": -1}, "benchmarks.ReadFewColumnsHTTPS.peakmem_run": {"code": "class ReadFewColumnsHTTPS:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of read_parquet(self.path, columns=self.columns)\"\"\"\n        self.run()", "name": "benchmarks.ReadFewColumnsHTTPS.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "cc08290bf8bf1e64e5236cb69b8c36f0d4a65bfc300ae4cd9f83c1bded8c9e26"}, "benchmarks.ReadFewColumnsHTTPS.time_run": {"code": "class ReadFewColumnsHTTPS:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of read_parquet(self.path, columns=self.columns)\"\"\"\n        self.run()", "min_run_count": 2, "name": "benchmarks.ReadFewColumnsHTTPS.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6a51e680e1fcdf9edd2259466fb439dc4bc3224f4f42763b04b76ed0f4625b6f", "warmup_time": -1}, "benchmarks.ReadFewColumnsS3.peakmem_run": {"code": "class ReadFewColumnsS3:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of read_parquet(self.path, columns=self.columns)\"\"\"\n        self.run()", "name": "benchmarks.ReadFewColumnsS3.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "4ed3b0e7a17720c62bd5ee6b14c5fe6464a75e573723ff35822623d17b51fb0c"}, "benchmarks.ReadFewColumnsS3.time_run": {"code": "class ReadFewColumnsS3:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of read_parquet(self.path, columns=self.columns)\"\"\"\n        self.run()", "min_run_count": 2, "name": "benchmarks.ReadFewColumnsS3.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4a225583d4100d419aecf0777bf473bb7d0453c7b89ffde0e415e10ccd4dd669", "warmup_time": -1}, "benchmarks.ReassignHalfOfNestedSeries.peakmem_run": {"code": "class ReassignHalfOfNestedSeries:\n    def peakmem_run(self):\n        \"\"\"Benchmark the memory usage of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we need to\n        # order by field name here for backwards compatibility.\n        dtype = NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()})\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            dtype=dtype,\n        )\n    \n        new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        self.new_series = pd.Series([new_df] * (self.n_objects // 2), dtype=dtype)", "name": "benchmarks.ReassignHalfOfNestedSeries.peakmem_run", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "567fe640051453cd164d11ee74a8aff8c06e2b89a239133ddcc020d9fe426a55"}, "benchmarks.ReassignHalfOfNestedSeries.time_run": {"code": "class ReassignHalfOfNestedSeries:\n    def time_run(self):\n        \"\"\"Benchmark the runtime of changing a single nested series element.\"\"\"\n        self.run()\n\n    def setup(self):\n        \"\"\"Set up the benchmark environment.\"\"\"\n        # When we had NestedExtentionArray inheriting ArrowExtentionArray, it sorted the fields, so we need to\n        # order by field name here for backwards compatibility.\n        dtype = NestedDtype.from_fields({\"band\": pa.string(), \"flux\": pa.float64(), \"time\": pa.float64()})\n        original_df = pd.DataFrame(\n            {\n                \"time\": np.linspace(0, 1, self.n_sources),\n                \"flux\": np.arange(self.n_sources, dtype=np.float64),\n                \"band\": np.full_like(\"sdssu\", self.n_sources),\n            }\n        )\n        self.series = pd.Series(\n            [original_df] * self.n_objects,\n            dtype=dtype,\n        )\n    \n        new_df = pd.DataFrame(\n            {\n                \"time\": np.arange(self.n_sources, dtype=np.float64),\n                \"flux\": np.linspace(0, 1, self.n_sources),\n                \"band\": np.full_like(\"lsstg\", self.n_sources),\n            }\n        )\n        self.new_series = pd.Series([new_df] * (self.n_objects // 2), dtype=dtype)", "min_run_count": 2, "name": "benchmarks.ReassignHalfOfNestedSeries.time_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9d18ab926df92e4580e7dcbb3760d4206342c672b1e879d7e5a0a3542904b9e4", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {"v0.1": 142, "v0.1.1": 165, "v0.1.2": 188, "v0.1.3": 198, "v0.2.0": 218, "v0.2.1": 221, "v0.2.2": 223, "v0.3.0": 267, "v0.3.1": 269, "v0.3.2": 270, "v0.3.3": 283, "v0.3.4": 303, "v0.3.5": 306, "v0.3.6": 314, "v0.3.7": 333, "v0.3.8": 354, "v0.3.9": 367, "v0.4.0": 427, "v0.4.1": 433, "v0.4.2": 459, "v0.4.3": 481, "v0.4.4": 499, "v0.4.5": 525, "v0.4.6": 532, "v0.4.7": 562, "v0.4.8": 567, "v0.4.9": 600, "v0.5.0": 621}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}